import sys
import argparse
import param
import pickle
import numpy as np


def Run(args):
    # create a Clairvoyante
    if args.v1 == True:
      import utils_v1 as utils
      if args.slim == True:
          import clairvoyante_v1_slim as cv
      else:
          import clairvoyante_v1 as cv
    else:
      import utils_v2 as utils
      if args.slim == True:
          import clairvoyante_v2_slim as cv
      else:
          import clairvoyante_v2 as cv
    utils.SetupEnv()
    m = cv.Clairvoyante()
    m.init()

    CalcAll(args, m, utils)

def CalcAll(args, m, utils):
    if args.bin_fn != None:
        with open(args.bin_fn, "rb") as fh:
            total = pickle.load(fh)
            XArrayCompressed = pickle.load(fh)
            YArrayCompressed = pickle.load(fh)
            posArrayCompressed = pickle.load(fh)
    else:
        total, XArrayCompressed, YArrayCompressed, posArrayCompressed = \
        utils.GetTrainingArray(args.tensor_fn,
                               args.var_fn,
                               args.bed_fn)

    predictBatchSize = param.predictBatchSize
    trainingTotal = int(total*param.trainingDatasetPercentage)
    validationStart = trainingTotal + 1
    numValItems = total - validationStart

    for n in args.chkpnt_fn:
        m.restoreParameters("./"+n)
        datasetPtr = 0
        trainingLost = 0
        validationLost = 0
        i = 1
        while True:
            XBatch, num, endFlag = utils.DecompressArray(XArrayCompressed, datasetPtr, predictBatchSize, trainingTotal)
            YBatch, num2, endFlag2 = utils.DecompressArray(YArrayCompressed, datasetPtr, predictBatchSize, trainingTotal)
            if num != num2 or endFlag != endFlag2:
                sys.exit("Inconsistency between decompressed arrays: %d/%d" % (num, num2))
            #print >> sys.stderr, "Tra: %d/%d/%d" % (datasetPtr, num, num2)
            trainingLost += m.getLoss( XBatch, YBatch )
            if endFlag != 0:
                for j in range(validationStart, total, predictBatchSize):
                    XBatch, _, _ = utils.DecompressArray(XArrayCompressed, j, predictBatchSize, total)
                    YBatch, _, _ = utils.DecompressArray(YArrayCompressed, j, predictBatchSize, total)
                    validationLost += m.getLoss( XBatch, YBatch )
                    #print >> sys.stderr, "Val: %d/%d/%d" % (j, num, num2)
                print >> sys.stderr, "%s\t%.10f\t%.10f" % (n, trainingLost/trainingTotal, validationLost/numValItems)
                break;
            i += 1
            datasetPtr += predictBatchSize


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
            description="Calculate the loss different between training dataset and validation dataset" )

    parser.add_argument('--bin_fn', type=str, default = None,
            help="Binary tensor input generated by tensor2Bin.py, tensor_fn, var_fn and bed_fn will be ignored")

    parser.add_argument('--tensor_fn', type=str, default = None,
            help="Tensor input")

    parser.add_argument('--var_fn', type=str, default = None,
            help="Truth variants list input")

    parser.add_argument('--bed_fn', type=str, default = None,
            help="High confident genome regions input in the BED format")

    parser.add_argument('--chkpnt_fn', nargs='+', type=str, default = None,
            help="Input a list of checkpoint for calculation")

    parser.add_argument('--v1', type=bool, default = False,
            help="Use Clairvoyante version 1")

    parser.add_argument('--slim', type=bool, default = False,
            help="Train using the slim version of Clairvoyante, optional")

    args = parser.parse_args()

    if len(sys.argv[1:]) == 0:
        parser.print_help()
        sys.exit(1)

    Run(args)

